{"version":3,"sources":["Components/Header.js","Components/Login.js","Components/Home.js","Components/Gallery.js","Tests/GalleryTest.js","Components/Folders.js","App.js","index.js"],"names":["React","Component","require","$","Login","props","on","firebase","signInWithEmailAndPassword","val","catch","error","code","message","window","location","pathname","className","htmlFor","type","id","placeholder","Home","GalleryTest","viewImage","event","index","target","attr","isOpen","items","imgData","options","parseInt","h","w","onClose","handleClose","loadList","remove","begin","currentPage","numberPerPage","end","modifiedListData","state","thumbs","slice","slicedFullSizeImages","fullSizeImages","map","item","i","getDownloadURL","then","url","getMetadata","data","push","src","fileName","name","thumbnail","fileType","contentType","getFullSizeImages","drawList","fullSizeImageList","showImage","e","slicedName","split","join","forEach","img","open","length","setState","hasLoaded","check","noImages","imageRef","ref","storagePath","thumbRef","originalListData","newImagesList","numberOfPages","imgsForSwipe","fullSizeIMGs","this","addItemsToArray","loadImages","setInterval","focus","trigger","evt","files","uploadPhoto","size","updated","lastModified","file","meta","upload","child","put","TaskEvent","STATE_CHANGED","snapshot","progress","bytesTransferred","totalBytes","css","display","width","Math","round","text","downloadURL","listAll","fullSizedImages","getNumberOfPages","ceil","clearInterval","folderName","href","accept","style","multiple","role","aria-valuenow","aria-valuemin","aria-valuemax","height","includes","color","key","onClick","value","Folders","createFolder","databaseRef","set","toLowerCase","modal","getFolders","ownerID","userID","finalFolderList","folderList","currentUser","uid","storageFolderName","loadFolders","class","console","log","to","tabIndex","data-dismiss","aria-label","aria-hidden","lazy","App","user","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","onAuthStateChanged","exact","path","render","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.93bc72df.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default class Header extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div></div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport * as firebase from 'firebase';\r\nrequire(\"firebase/auth\");\r\nconst $ = require(\"jquery\");\r\n\r\nexport default class Login extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n\r\n    componentDidMount(){\r\n        $(\".login-btn\").on(\"click\", () => {\r\n            firebase.auth().signInWithEmailAndPassword($(\"#email\").val(), $(\"#password\").val()).catch(function(error) {\r\n                var errorCode = error.code;\r\n                var errorMessage = error.message;\r\n                window.location.pathname = \"/gallery\"\r\n              });\r\n        });\r\n\r\n        \r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"login-content\">\r\n                <label htmlFor=\"email\">Email</label>\r\n                <input className=\"form-control\" type=\"text\" id=\"email\" placeholder=\"Enter Email Address\"></input>\r\n    \r\n                <label htmlFor=\"password\">Password</label>\r\n                <input className=\"form-control\" type=\"password\" id=\"password\" placeholder=\"Enter Password\"></input>\r\n    \r\n                <button className=\"btn login-btn\">Sign In</button>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport Header from \"./Header\";\r\nimport Login from \"./Login\";\r\n\r\nexport default class Home extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"container\">\r\n               <Login />\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport * as firebase from 'firebase';\r\nrequire(\"firebase/database\");\r\nrequire(\"firebase/storage\");\r\nrequire(\"firebase/auth\");\r\nconst $ = require(\"jquery\");\r\n\r\nexport default class Gallery extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.state = {\r\n            imageRef: firebase.storage().ref(\"uploadedImages/\")\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount(){\r\n\r\n        var fileList = [];\r\n\r\n        $(\"#add-photo\").on(\"click\", () => {\r\n            $(\".new-photo-input\").focus().trigger('click');\r\n            $(\".new-photo-input\").on('change',(evt) => {\r\n                for(var i = 0; i < evt.target.files.length; i++){\r\n                    fileList.push(evt.target.files[i]);\r\n                }\r\n                fileList.forEach(image => {\r\n                    this.uploadPhoto(image, image.type);\r\n                });\r\n            });\r\n        });\r\n\r\n    }\r\n\r\n    componentWillMount(){\r\n        this.pageTokenExample();\r\n    }\r\n\r\n    async pageTokenExample(){\r\n        var listRef = firebase.storage().ref(\"uploadedImages/\");\r\n\r\n        var firstPage = await listRef.list({ maxResults: 50});\r\n        firstPage.items.forEach(image => {\r\n            image.getDownloadURL().then(url => {\r\n                $(\".image-content\").find(\".col\").append(`<img src=${url}></img>`);\r\n            });\r\n        });\r\n\r\n        $(window).scroll(async function() {\r\n            if($(window).scrollTop() + $(window).height() == $(document).height() && firstPage.nextPageToken) {\r\n                    var secondPage = await listRef.list({maxResults: 15, pageToken: firstPage.nextPageToken});\r\n                    for(var i = 0; i < secondPage.items.length; i++){\r\n                        secondPage.items[i].getDownloadURL().then(url => {\r\n                            $(\".image-content\").find(\".col\").append(`<img src=${url}></img>`);\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        addImagesToGrid(url){\r\n            $(\".image-content\").find(\".col\").append(`<img src=${url}></img>`);\r\n        }\r\n\r\n    uploadPhoto(file, meta) {\r\n        const metadata = {\r\n            contentType: meta\r\n        };\r\n\r\n        let upload = this.state.imageRef.child(`img-${Math.random()}`).put(file, metadata);\r\n        upload.on(firebase.storage.TaskEvent.STATE_CHANGED,\r\n            (snapshot) => {\r\n                let progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n                $(\".progress-bar\").css({display:\"flex\"});\r\n                $(\".progress-bar\").width(Math.round(progress) + \"%\");\r\n                $(\".progress-bar\").text(Math.round(progress) + \"%\");\r\n            },\r\n            (error) => {\r\n                switch (error.code) {\r\n                    case 'storage/unauthorized':\r\n                        break;\r\n                    case 'storage/unknown':\r\n                        break;\r\n                }\r\n            }, () => {\r\n                upload.snapshot.ref.getDownloadURL().then((downloadURL) => {\r\n                    $(\".progress-bar\").css({display:\"none\"});\r\n                });\r\n            });\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"gal-content\">\r\n                <section className=\"top-section\">\r\n                <button className=\"btn btn-sm\" id=\"add-photo\">Add more photo's</button>\r\n                <input type=\"file\" name=\"file\" accept=\"image/*\" id=\"add-photo\" className=\"new-photo-input\" style={{display:\"none\"}} multiple></input>\r\n                </section>\r\n                <div className=\"progress\">\r\n                <div className=\"progress-bar\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\" style={{display:\"none\"}}></div>\r\n                </div>\r\n                <hr/>\r\n                <section className=\"image-content\">\r\n                        <div className=\"col\"></div>\r\n                </section>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport * as firebase from 'firebase';\r\nimport { PhotoSwipe } from \"react-photoswipe\";\r\nimport LazyLoad from \"react-lazyload\";\r\nimport { FaFileVideo } from 'react-icons/fa';\r\nrequire(\"firebase/database\");\r\nrequire(\"firebase/storage\");\r\nrequire(\"firebase/auth\");\r\nconst $ = require(\"jquery\");\r\n\r\nexport default class GalleryTest extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            imageRef: firebase.storage().ref(`${props.location.state.storagePath}/`),\r\n            thumbRef: firebase.storage().ref(`${props.location.state.storagePath}/thumbs`),\r\n            originalListData: [],\r\n            hasLoaded: false,\r\n            noImages: false,\r\n            showImage: false\r\n        }\r\n        \r\n    this.modifiedListData = [];\r\n    this.newImagesList = [];\r\n    this.numberPerPage = 50;\r\n    this.currentPage = 1;\r\n    this.numberOfPages = 0;\r\n    this.imgData = [];\r\n    this.isOpen = false;\r\n    this.imgsForSwipe = [];\r\n    this.fullSizeImageList = [];\r\n    this.fullSizeIMGs = [];\r\n    }\r\n\r\n    componentWillMount(){\r\n        this.addItemsToArray();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadImages = setInterval(() => {\r\n                this.loadList();\r\n        }, 2000);\r\n\r\n        $(\"#add-photo\").on(\"click\", () => {\r\n            $(\".new-photo-input\").focus().trigger('click');\r\n            $(\".new-photo-input\").on('change',(evt) => {\r\n                for(var i = 0; i < evt.target.files.length; i++){\r\n                    this.newImagesList.push(evt.target.files[i]);\r\n                    this.uploadPhoto(evt.target.files[i], {\r\n                        contentType: evt.target.files[i].type,\r\n                        name: evt.target.files[i].name,\r\n                        size: evt.target.files[i].size,\r\n                        updated: evt.target.files[i].lastModified\r\n                    });\r\n                }\r\n                \r\n            });\r\n        });\r\n\r\n        $(\".next\").on(\"click\", e => {\r\n        this.currentPage += 1;\r\n        this.loadList();\r\n        });\r\n\r\n        $(\".prev\").on(\"click\", e => {\r\n        this.currentPage = - 1;\r\n        this.loadList();\r\n        });\r\n\r\n    }\r\n\r\n    uploadPhoto(file, meta) {\r\n        const metadata = {\r\n            meta\r\n        };\r\n\r\n        let upload = this.state.imageRef.child(file.name).put(file, meta);\r\n        upload.on(firebase.storage.TaskEvent.STATE_CHANGED,\r\n            (snapshot) => {\r\n                let progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n                $(\".progress-bar\").css({display:\"flex\"});\r\n                $(\".progress-bar\").width(Math.round(progress) + \"%\");\r\n                $(\".progress-bar\").text(Math.round(progress) + \"%\");\r\n            },\r\n            (error) => {\r\n                switch (error.code) {\r\n                    case 'storage/unauthorized':\r\n                        break;\r\n                    case 'storage/unknown':\r\n                        break;\r\n                }\r\n            }, () => {\r\n                upload.snapshot.ref.getDownloadURL().then((downloadURL) => {\r\n                    $(\".progress-bar\").css({display:\"none\"});\r\n                });\r\n            });\r\n    }\r\n    \r\n\r\n    viewImage = event => {\r\n        const index = $(event.target).attr(\"id\");\r\n        return <PhotoSwipe\r\n        isOpen={this.isOpen = true} \r\n        items={this.imgData} \r\n        options={{index: parseInt(index), h: 3000, w: 3000}} \r\n        onClose={this.handleClose()}\r\n        />\r\n    }\r\n\r\n    handleClose = () => {\r\n        this.isOpen = false;\r\n    }\r\n\r\n    async addItemsToArray(){\r\n        var fullSizedImages = await this.state.imageRef.listAll();\r\n        var thumbs = await this.state.thumbRef.listAll();\r\n            this.setState({\r\n                thumbs: thumbs.items,\r\n                fullSizeImages: fullSizedImages.items\r\n            });\r\n        this.numberOfPages = this.getNumberOfPages()\r\n    }\r\n    \r\n      loadList = () => {\r\n          $(\"img\").remove();\r\n         var begin = ((this.currentPage - 1) * this.numberPerPage);\r\n    \r\n         var end = begin + this.numberPerPage;\r\n\r\n         this.modifiedListData = this.state.thumbs.slice(begin, end);\r\n         this.slicedFullSizeImages = this.state.fullSizeImages.slice(begin, end);\r\n\r\n         this.modifiedListData.map((item, i) => {\r\n                item.getDownloadURL().then(url => {\r\n                item.getMetadata().then(data => {\r\n                    this.imgData.push({\r\n                        index: i,\r\n                        src: {\r\n                            fileName: item.name,\r\n                            thumbnail: url,\r\n                            fileType: data.contentType\r\n                        }\r\n                        });\r\n                    });\r\n                });\r\n            });\r\n            this.getFullSizeImages()\r\n         this.drawList();\r\n      }\r\n\r\n      getFullSizeImages = () => {\r\n          this.slicedFullSizeImages.map((item, i) => {\r\n              item.getMetadata().then(data => {\r\n                item.getDownloadURL().then(url => {\r\n                    this.fullSizeImageList.push(\r\n                        {\r\n                            fileName: item.name,\r\n                            fileType: data.contentType,\r\n                            src: url\r\n                        }\r\n                    );\r\n                 });\r\n              });\r\n          });\r\n      }\r\n\r\n      showImage = (e) => {\r\n          var fileName = $(e.target).attr(\"id\");\r\n              var slicedName = fileName.split(\"_512x512\").join(\"\");\r\n             this.fullSizeImageList.forEach(img => {\r\n                 if(img.fileName === slicedName){\r\n                     window.open(img.src)\r\n                 }\r\n             });\r\n      }\r\n    \r\n    //   () => {\r\n    //     var link = url.split(\"_512x512\");\r\n    //     // .join(`token=${getToken}`)\r\n    //     link.map((img, i) => {\r\n    //         link.shift(i);\r\n    //         // img.join(`token=${getToken}`)\r\n    //     });\r\n    //     link.forEach(item => {\r\n    //         console.log(item)\r\n    //     });\r\n    //     return getToken + link;\r\n    // }\r\n\r\n      getNumberOfPages() {\r\n        return Math.ceil(this.state.thumbs.length / this.numberPerPage);\r\n    }\r\n\r\n    \r\n\r\n    drawList = () => {\r\n        if(this.state.thumbs.length){\r\n            this.setState({\r\n                hasLoaded: true\r\n            });\r\n    \r\n            // this.imgData.forEach(img => {\r\n            //     this.imgsForSwipe.push(\r\n            //         {\r\n            //             src: img.src,\r\n            //             h: 3000,\r\n            //             w: 3000\r\n            //         })\r\n            // });\r\n\r\n            this.check();\r\n        }else{\r\n            this.setState({noImages: true})\r\n        }\r\n    }\r\n\r\n    check() {\r\n        $(\".next\").attr(\"disabled\", this.currentPage == this.numberOfPages ? true : false);\r\n        $(\".prev\").attr(\"disabled\", this.currentPage == 1 ? true : false);\r\n        $(\".first\").attr(\"disabled\", this.currentPage == 1 ? true : false);\r\n        $(\".last\").attr(\"disabled\", this.currentPage == this.numberOfPages ? true : false);\r\n    }\r\n\r\n\r\n    noImages(){\r\n        $(\".load-spin\").css({display: \"none\"});\r\n        $(\".loading-text\").text(\"\");\r\n        clearInterval(this.loadImages)\r\n        return this.imgData.length === 0 ? <p>No Images Were Found!</p> : \"\"\r\n    }\r\n\r\n    // getImageItems(){\r\n    //     var imgUrl = \"\";\r\n    //     var index = 0;\r\n    //     for(var i = 0; i < this.modifiedListData.length; i++){\r\n    //         this.modifiedListData[i].getDownloadURL().then(url => {\r\n    //             index = i;\r\n    //             imgUrl = url;\r\n    //         });\r\n    //     }\r\n    //     return <LazyLoad \r\n    //     height=\"200\" \r\n    //     offset={100} \r\n    //     resize={true} \r\n    //     once={true}>\r\n    //   <a href={url}>\r\n    //   <img\r\n    //     className=\"image-item\"\r\n    //     id={index} \r\n    //     key={i} \r\n    //     src={im}\r\n    //     onClick={this.viewImage}\r\n    //     ></img>\r\n    //   </a>\r\n    //     </LazyLoad>\r\n    // }\r\n\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <section className=\"top-section\">\r\n                <div className=\"options\">\r\n                <p className=\"folder-name\">{this.props.location.state.folderName}</p>\r\n                <a className=\"home-link\" href=\"/\">Home</a>\r\n                <button className=\"btn btn-sm\" id=\"add-photo\">Add more photo's</button>\r\n                </div>\r\n                <input type=\"file\" name=\"file\" accept=\"image/*, video/*\" id=\"add-photo\" className=\"new-photo-input\" style={{display:\"none\"}} multiple></input>\r\n                </section>\r\n            <div className=\"gal-content\">\r\n                <div className=\"progress\">\r\n                <div className=\"progress-bar\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\" style={{display:\"none\"}}></div>\r\n                </div>\r\n                <section className=\"image-content\">\r\n                <div className=\"col\">\r\n                <div className=\"spinner-border text-info load-spin\" role=\"status\">\r\n                <span className=\"sr-only\">Loading...</span>\r\n                </div>\r\n                <p className=\"loading-text\">Loading...</p>\r\n                {this.state.hasLoaded ? this.imgData.map((item, i) => {\r\n                    $(\".load-spin\").css({display: \"none\"})\r\n                    $(\".loading-text\").text(\"\");\r\n                    clearInterval(this.loadImages);\r\n                    return <LazyLoad height={5}>\r\n                        {item.src.fileType.includes(\"video\") ?\r\n                        <a href={item.src}>\r\n                        <FaFileVideo className=\"folder-icon img-thumbnail\" color=\"#5f9ea0\"/> \r\n                        </a>\r\n                        :\r\n                        <img className=\"img image-item img-thumbnail\" key={i} id={item.src.fileName} onClick={this.showImage} src={item.src.thumbnail}></img>\r\n                        }\r\n                    </LazyLoad>\r\n                        }) : this.state.noImages ? this.noImages() : null}\r\n\r\n                        {this.fullSizeImageList.map((item, i) => {\r\n                        return item.fileType.includes(\"video\") ?\r\n                        <LazyLoad>\r\n                        <a href={item.src}>\r\n                        <FaFileVideo className=\"folder-icon img-thumbnail\" color=\"#5f9ea0\"/> \r\n                        </a>\r\n                        </LazyLoad>\r\n                         : null\r\n                    })}\r\n                </div>\r\n                <div className=\"controls\">\r\n                <button className=\"btn btn-sm prev\">Prev</button>\r\n                <button className=\"btn btn-sm next\"value=\"next\">Next</button>\r\n                </div>\r\n                </section>\r\n            </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// render() {\r\n//     const noteItems = this.state.notes.map((note) =>\r\n//       <li>{note}</li>\r\n//     );\r\n//     return (\r\n//       <ul>{noteItems}</ul>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// {this.imagesList.map((img, i) => <img key={i} src={img}></img>)}","import React from \"react\";\r\nimport { Link, Route } from \"react-router-dom\";\r\nimport { FaFolder } from 'react-icons/fa';\r\nimport * as firebase from 'firebase/app';\r\n\r\nrequire(\"firebase/database\");\r\nrequire(\"bootstrap/js/src\");\r\nconst $ = require(\"jquery\");\r\n\r\nexport default class Folders extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.state = {\r\n            userID: props.currentUser.uid,\r\n            databaseRef: firebase.database().ref('folders/'),\r\n            folderList: [],\r\n            folderName: \"\",\r\n            storageFolderName: \"\"\r\n        }\r\n\r\n        this.finalFolderList = [];\r\n\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.getFolders();\r\n    }\r\n\r\n    componentDidMount(){\r\n\r\n        this.loadFolders = setInterval(() => {\r\n            this.loadList();\r\n        }, 1500);\r\n\r\n    }\r\n\r\n    createFolder = () => {\r\n        var folderName = $(\"#main-folder-name\").val();\r\n        this.state.databaseRef.push().set({\r\n            storagePath: folderName.includes(\" \") ? folderName.split(\" \").join(\"-\").toLowerCase() :  folderName.toLowerCase(),\r\n            folderName: $(\"#main-folder-name\").val(),\r\n          }, error => {\r\n            if (error) {\r\n              // The write failed...\r\n            } else {\r\n            }\r\n          }).then(() => {\r\n            $('.modal').modal('hide');\r\n            // $(\".f-items\").remove();\r\n            this.loadList()\r\n          });\r\n        }\r\n\r\n        \r\n    getFolders = () => {\r\n        this.state.databaseRef.on('child_added', data => {\r\n            if(data.val().ownerID === this.state.userID){\r\n                this.finalFolderList.push(data);\r\n            }\r\n          });\r\n    }\r\n\r\n    loadList = () => {\r\n        this.setState({\r\n            folderList: this.finalFolderList\r\n        });\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n            <section className=\"top-section\">\r\n            <button className=\"btn btn-sm create-folder\" onClick={() => $('.modal').modal('show')}>Create a folder</button>\r\n            </section>\r\n            <div className=\"folder-layout\" >\r\n            <div class=\"d-flex justify-content-center pt-3\">\r\n            <div class=\"spinner-border load-spin\" role=\"status\">\r\n                <span class=\"sr-only\">Loading...</span>\r\n            </div>\r\n            </div>\r\n            <p className=\"loading-text\">Loading Folders...</p>\r\n                <div className=\"folders\">\r\n            {this.state.folderList.length ? this.state.folderList.map((items, i) => {\r\n                clearInterval(this.loadFolders);\r\n                $(\".load-spin\").css({display: \"none\"})\r\n                $(\".loading-text\").text(\"\");\r\n                console.log(this.state.userID);\r\n                return <Link className=\"f-items\" key={i} to={{ \r\n                    pathname: '/gallery', \r\n                    state: {\r\n                        storagePath: items.val().storagePath,\r\n                        folderName: items.val().folderName,\r\n                        loadImages: true\r\n                    } \r\n                }}><p className=\"folder-item\"><FaFolder className=\"folder-icon\" color=\"#5f9ea0\" />{items.val().folderName}</p></Link>\r\n            }) : clearInterval(this.loadFolders)}\r\n                </div>\r\n                <div className=\"modal\" tabIndex=\"-1\" role=\"dialog\">\r\n            <div className=\"modal-dialog\" role=\"document\">\r\n                <div className=\"modal-content\">\r\n                <div className=\"modal-header\">\r\n                    <h5 className=\"modal-title\">Create a new folder</h5>\r\n                    <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n                    <span aria-hidden=\"true\">&times;</span>\r\n                    </button>\r\n                </div>\r\n                <div className=\"modal-body\">\r\n                    <label htmlFor=\"main-folder-name\">Folder Name</label>\r\n                    <input className=\"form-control\" type=\"text\" id=\"main-folder-name\"></input>\r\n                </div>\r\n                <div className=\"modal-footer\">\r\n                    <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\r\n                    <button type=\"button\" className=\"btn btn-primary\" onClick={this.createFolder}>Create Folder</button>\r\n                </div>\r\n                </div>\r\n            </div>\r\n            </div>\r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n// TODO\r\n// Fix the array of folders\r\n// Stop multiple folders showing when being added to view\r\n\r\n\r\n// NOTES\r\n// Once that works, when clicking button i need to pass the folder name and storage folder name throught to gallery as a prop\r\n\r\n// window.history.pushState(\"\", \"Title\", \"/gallery\")","import React from 'react';\nimport {BrowserRouter, Route} from 'react-router-dom';\nimport Home from './Components/Home';\nimport * as firebase from 'firebase/app';\nimport Gallery from './Components/Gallery';\nimport GalleryTest from './Tests/GalleryTest';\nimport Folders from './Components/Folders';\n\nconst ImageView = React.lazy(() => import(\"./Components/ImageView\"))\nrequire(\"firebase/auth\");\n\nexport default class App extends React.Component{\n  constructor(props){\n    super();\n\n    this.state = {\n      user: null\n    };\n\n\n    var firebaseConfig = {\n      apiKey: \"AIzaSyBCPuCUA_bDwh3uwRDZwawIB7CE_7LiT9k\",\n      authDomain: \"mybakupcloud.firebaseapp.com\",\n      databaseURL: \"https://mybakupcloud.firebaseio.com\",\n      projectId: \"mybakupcloud\",\n      storageBucket: \"mybakupcloud.appspot.com\",\n      messagingSenderId: \"94960637608\",\n      appId: \"1:94960637608:web:cb47ef0d0cc01c0d1c149d\"\n    };\n    \n    firebase.initializeApp(firebaseConfig);\n\n  }\n\n\n  componentWillMount(){\n    firebase.auth().onAuthStateChanged(user => {\n      if (user) {\n        this.setState({user});\n      } else {\n        this.setState({ user: null });\n      }\n    });\n  }\n   \n  render(){\n    return (\n      <BrowserRouter>\n          <Route exact={true} path='/' render={() => (\n              this.state.user !=null ? <Folders currentUser={this.state.user} /> : <Home /> \n            )}/>\n            <Route exact={false} path='/:handle' render={props => (\n             <GalleryTest {...props} />\n            )}/>\n        </BrowserRouter>\n    );\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}